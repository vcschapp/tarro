/*
MIT License

Copyright (c) 2017 Victor Schappert

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

package io.tarro.base.flag;

import io.tarro.base.ClassFileVersion;

import java.util.List;

import static io.tarro.base.ClassFileVersion.JAVA1;
import static io.tarro.base.ClassFileVersion.JAVA5;
import static io.tarro.base.flag.FlagMixRule.allOf;
import static io.tarro.base.flag.FlagMixRule.listify;
import static io.tarro.base.flag.FlagMixRule.noneOf;
import static io.tarro.base.flag.FlagMixRule.notBothOf;
import static io.tarro.base.flag.FlagMixRule.visibilityRule;

/**
 * Enumerates the flags available for the {@code access_flags} field of a
 * {@code field_info} structure within a Java class file.
 *
 * @author Victor Schappert
 * @since 20171016
 */
public enum FieldAccessFlag implements Flag {

    //
    // ENUMERATORS
    //

    /**
     * {@code 0x0001} ({@code ACC_PUBLIC}): Indicates the field is declared
     * {@code public} and may be accessed from outside its package.
     *
     * @see #PRIVATE
     * @see #PROTECTED
     */
    PUBLIC(0x0001),
    /**
     * {@code 0x0002} ({@code ACC_PRIVATE}): Indicates the field is declared
     * {@code private} and is only usable within the defining class.
     *
     * @see #PUBLIC
     * @see #PROTECTED
     */
    PRIVATE(0x0002),
    /**
     * {@code 0x0004} ({@code ACC_PROTECTED}): Indicates the field is declared
     * {@code protected} and may be accessed within subclasses.
     *
     * @see #PUBLIC
     * @see #PRIVATE
     */
    PROTECTED(0x0004),
    /**
     * {@code 0x0008} ({@code ACC_STATIC}): Indicates the field is declared
     * {@code static}, <em>ie</em> is not an instance field.
     */
    STATIC(0x0008),
    /**
     * {@code 0x0010} ({@code ACC_FINAL}): Indicates the field is declared
     * {@code final} and may never be directly assigned after object
     * construction.
     */
    FINAL(0x0010),
    /**
     * {@code 0x0040} ({@code ACC_VOLATILE}): Indicates the field is declared
     * {@code volatile}, which has certain ramifications for the Java Memory
     * Model.
     */
    VOLATILE(0x0040),
    /**
     * {@code 0x0080} ({@code ACC_TRANSIENT}): Indicates the field is declared
     * {@code transient} and will not be read or written by a persistent object
     * manager.
     */
    TRANSIENT(0x0080),
    /**
     * {@code 0x1000} ({@code ACC_SYNTHETIC}): Indicates the field is synthetic,
     * meaning it was generated by a compiler or similar program and is not
     * present in the source code.
     */
    SYNTHETIC(0x1000, JAVA5),
    /**
     * {@code 0x4000} ({@code ACC_ENUM}): Indicates the field is a member of an
     * enumeration (enumerator).
     */
    ENUM(0x4000, JAVA5);

    //
    // DATA
    //

    private final int value;
    private final ClassFileVersion classFileVersion;

    //
    // CONSTRUCTORS
    //

    FieldAccessFlag(final int value, final ClassFileVersion classFileVersion) {
        this.value = value;
        this.classFileVersion = classFileVersion;
    }

    FieldAccessFlag(final int value) {
        this(value, JAVA1);
    }

    //
    // INTERFACE: Flag
    //

    @Override
    public String getFlagName() {
        return "ACC_" + name();
    }

    //
    // INTERFACE: Valued
    //

    /**
     * {@inheritDoc}
     *
     * <p>
     * This method returns the individual flag's integer value, which is
     * guaranteed to be a power of two distinct from any other flag in the
     * enumeration, since the {@code access_flags} member of the
     * {@code field_info} structure is a bitmask.
     * </p>
     *
     * @return Flag bit
     */
    @Override
    public int getValue() {
        return value;
    }

    //
    // INTERFACE: Versioned
    //

    @Override
    public ClassFileVersion getFirstVersionSupporting() {
        return classFileVersion;
    }

    //
    // PUBLIC STATICS
    //

    /**
     * Obtains the rules about which field flags may be mixed together <em>on
     * the fields of a {@code class}</em>, as opposed to an {@code interface}.
     *
     * @return Class-specific field flag mixing rules
     * @see #interfaceFieldRules()
     */
    public static List<FlagMixRule<FieldAccessFlag>> classFieldRules() {
        // Thread-safe despite the appearance of a race condition involving a
        // static variable because the rule-making method is idempotent and we
        // don't care if we do marginal amounts of redundant work in unlikely
        // corner cases.
        if (null != CLASS_FIELD_RULES) {
            return CLASS_FIELD_RULES;
        } else {
            return CLASS_FIELD_RULES = listify(makeClassSpecificRules());
        }
    }

    /**
     * Obtains the rules about which field flags may be mixed together <em>on
     * the fields of an {@code interface}</em>, as opposed to a {@code class}.
     *
     * @return Interface-specific field flag mixing rules
     * @see #classFieldRules()
     */
    public static List<FlagMixRule<FieldAccessFlag>> interfaceFieldRules() {
        // Thread-safe despite the appearance of a race condition involving a
        // static variable because the rule-making method is idempotent and we
        // don't care if we do marginal amounts of redundant work in unlikely
        // corner cases.
        if (null != INTERFACE_FIELD_RULES) {
            return INTERFACE_FIELD_RULES;
        } else {
            return INTERFACE_FIELD_RULES = listify(makeInterfaceSpecificRules());
        }
    }

    //
    // INTERNALS
    //

    @SuppressWarnings({"rawtypes", "unchecked"})
    private static FlagMixRule<FieldAccessFlag>[] makeClassSpecificRules() {
        return new FlagMixRule[] {
            visibilityRule("a field", PUBLIC, PRIVATE, PROTECTED),
            notBothOf("a field", FINAL, VOLATILE)
        };
    }

    private static List<FlagMixRule<FieldAccessFlag>> CLASS_FIELD_RULES;

    @SuppressWarnings({"rawtypes", "unchecked"})
    private static FlagMixRule<FieldAccessFlag>[] makeInterfaceSpecificRules() {
        return new FlagMixRule[] {
            allOf("an interface field", PUBLIC, STATIC, FINAL),
            noneOf("an interface field", PRIVATE, PROTECTED, VOLATILE, TRANSIENT, ENUM)
        };
    }

    private static List<FlagMixRule<FieldAccessFlag>> INTERFACE_FIELD_RULES;
}
