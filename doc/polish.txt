-------------
BUILD PROCESS
-------------

1. Fail build if any source file missing license.
2. javadoc has maximum linting turned on.
3. FindBugs.
4. CheckStyle.
5. EditorConfig - IDEA has built-in support for it - http://editorconfig.org/
6. Any other linting.
    - javac: For test module
    - kotlinc: For test module
7. NoTabs.
8. Eliminate as many TODOs as possible from the build.gradle's.


-------
TESTING
-------

1. 95% <= unit test coverage <= 100%
2. Long running tests are separated from short-running tests with appropriate
   JUnit 5 tags (living in test module) and Gradle tasks
3. Logging is properly set up for all the tests and easily configurable from
   a central point in the Gradle build file.
4. No println anywhere. All tests use loggers.

-------------
DOCUMENTATION
-------------

1. Every module has a module-info.java.
2. Every package has a package-info.java.
3. Each link is appropriately @link or @linkplain depending on whether it should
   have @code or normal style.
4. Grep the generated Javadoc to make sure there are no broken HTML tags
   showing up as rendered angle brackets.
5. Terms to use consistently:
        - Java Virtual Machine Specification (each word should be capitalized)
        - Java Virtual Machine instruction set (lowercase on instruction set)
        - invokedynamic/invokeinterface/etc. If consistent with JVM spec, every
          instance of these opcode "words"", including those embedded in
          OTHER_CONSTANT_VALUES should omit the underscore.
                **Hmmmm. On reflection, I'm not so sure about this.**
                **There are good reason to follow JVM instruction set
                **convention in the bytecode package and use underscores
                **everywhere else...
        - runtime constant pool (no hyphen between 'run' and 'time' ie not
          run-time)
6. Always use code styling for opcode names. So links should be @link, not
   @linkplain.
7. Bytecode entity documentation should preferably refer to the runtime constant
   pool rather than the class file constant_pool; and should use runtime
   constant pool concepts rather than class file concepts. See Ch.5 and ยง5.1.

----
CODE
----

1. Zero TODO comments.
2. Zero FIXME comments.
3. Appropriate annotations:
       [ ] @Nonnull
       [ ] @Nullable
       [ ] @ThreadSafe?
       [ ] @NotThreadSafe?
       [ ] @Immutable?
   BUT ONLY IF YOU FOLLOW these guidelines:
       - Use the lightest-weight dependency possible.
       - Prefer compile-time or "class" retention annotations to runtime retention.
       - Try to find one that's compatible with any JSR which hasn't been
         killed. At the moment I think that's JSR-308 since JSR-305 is at least
         dormant if not dead.
4. Method ordering (methods are arranged in sensible and consistent order)
   especially in ClassParser.
5. Parameter ordering:
        [ ] Methods have consistent parameter ordering.
        [ ] Overloaded methods consistently add the extra methods on the right.
6. Code size reduction challenge: reduce the aggregate bytecode size by at least
   5% (only do this after you have a working unit-tested version so you're doing
   it at a reasonable time).
7. Every method parameter is `final`.
8. Double check every class and method to determine whether it:
       - Should be `final`
       - Should have its protection level reduced
9. Every file has license and license text is the same in every file (up to date).
10. No .* imports
11. For enums that implement Versioned, in an automated fashion add
    @since {@linkplain ...} links to the class file version of where the thing
    was introduced. Need to make a tool for this to avoid error etc.
12. Every catch clause variable name is `final`.

-----------
STYLE GUIDE
-----------

In Javadoc, use the following conventions:

    - class file elements (such as field_info): @code
    - attribute names (suchs as Signature): @code, no quotes
    - instruction opcodes: emphasis (<em>)
